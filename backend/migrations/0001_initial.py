# Generated by Django 5.1.1 on 2025-02-12 10:57

import backend.models.school_manager
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Nom du type de document')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Type de document',
                'verbose_name_plural': 'Types de documents',
            },
        ),
        migrations.CreateModel(
            name='ExpenseCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom de la catégorie')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': "Catégorie d'expense",
                'verbose_name_plural': "Catégories d'expenses",
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Montant')),
                ('payment_date', models.DateField(auto_now_add=True, verbose_name='Date de paiement')),
                ('payment_method', models.CharField(max_length=50, verbose_name='Mode de paiement')),
                ('is_partial', models.BooleanField(default=False, verbose_name='Paiement partiel')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Payé')),
                ('reference_number', models.CharField(blank=True, max_length=50, verbose_name='Numéro de référence')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Paiement',
                'verbose_name_plural': 'Paiements',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='SanctionOrAppreciationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name="Nom du type de sanction ou d'appréciation")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': "Type de sanction ou d'appréciation",
                'verbose_name_plural': "Types de sanctions ou d'appréciations",
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('code', backend.models.school_manager.UUID4Field(auto_created=True, blank=True, max_length=17, unique=True)),
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name="Nom d'école")),
                ('address', models.CharField(max_length=200, verbose_name='Adresse')),
                ('city', models.CharField(choices=[('Brazzaville', 'Brazzaville'), ('Pointe Noire', 'Pointe Noire')], max_length=100, verbose_name='Ville')),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Code postal')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Téléphone')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Site web')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logos/', verbose_name='Logo')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
            ],
            options={
                'verbose_name': 'École',
                'verbose_name_plural': 'Écoles',
            },
        ),
        migrations.CreateModel(
            name='SchoolCycle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='Nom du cycle scolaire')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description du cycle scolaire')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Cycle scolaire',
                'verbose_name_plural': 'Cycles scolaires',
            },
        ),
        migrations.CreateModel(
            name='SchoolSeries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='Nom de la série')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Série',
                'verbose_name_plural': 'Séries',
            },
        ),
        migrations.CreateModel(
            name='SubjectGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Nom du groupe de matière')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Groupe de matière',
                'verbose_name_plural': 'Groupes de matières',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Nom du rôle')),
            ],
            options={
                'verbose_name': 'Rôle',
                'verbose_name_plural': 'Rôles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matricule', backend.models.school_manager.UUID4Field(auto_created=True, blank=True, max_length=17, unique=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('lastname', models.CharField(blank=True, max_length=50, null=True, verbose_name='Nom')),
                ('firstname', models.CharField(blank=True, max_length=50, null=True, verbose_name='Prénom')),
                ('nickname', models.CharField(blank=True, max_length=50, null=True, verbose_name='Surnom')),
                ('gender', models.CharField(blank=True, choices=[('Masculin', 'Masculin'), ('Féminin', 'Féminin')], max_length=10, null=True, verbose_name='Sexe')),
                ('nationality', models.CharField(blank=True, max_length=50, null=True, verbose_name='Nationalité')),
                ('birthplace', models.CharField(blank=True, max_length=100, null=True, verbose_name='Lieu de naissance')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Téléphone')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Adresse')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profiles/', verbose_name='Photo')),
                ('skype', models.CharField(blank=True, max_length=50, null=True, verbose_name='Skype')),
                ('gmail', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Gmail')),
                ('discord', models.URLField(blank=True, null=True, verbose_name='Discord')),
                ('whatsapp', models.CharField(blank=True, max_length=20, null=True, verbose_name='WhatsApp')),
                ('facebook', models.URLField(blank=True, null=True, verbose_name='Facebook')),
                ('twitter', models.URLField(blank=True, null=True, verbose_name='Twitter')),
                ('instagram', models.URLField(blank=True, null=True, verbose_name='Instagram')),
                ('linkedin', models.URLField(blank=True, null=True, verbose_name='LinkedIn')),
                ('is_principal', models.BooleanField(default=False, verbose_name='Est principal')),
                ('is_assistant', models.BooleanField(default=False, verbose_name='Est assistant')),
                ('hire_date', models.DateField(blank=True, null=True, verbose_name="Date de début d'emploi")),
                ('phone_work', models.CharField(blank=True, max_length=20, null=True, verbose_name='Téléphone professionnel')),
                ('profession', models.CharField(blank=True, max_length=50, null=True)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('roles', models.ManyToManyField(blank=True, to='backend.userrole', verbose_name='Rôles')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Contenu')),
                ('is_read', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='PaymentTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('En attente', 'En attente'), ('Terminé', 'Terminé'), ('Annulé', 'Annulé')], default='En attente', max_length=20, verbose_name='Statut')),
                ('tracked_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de suivi')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracking', to='backend.payment')),
            ],
            options={
                'verbose_name': 'Suivi de paiement',
                'verbose_name_plural': 'Suivis de paiements',
                'ordering': ['-tracked_date'],
            },
        ),
        migrations.CreateModel(
            name='ParentRegistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registered_children', to=settings.AUTH_USER_MODEL, verbose_name='Parents')),
                ('students', models.ManyToManyField(blank=True, related_name='registered_parents', to=settings.AUTH_USER_MODEL, verbose_name='Enfants')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.school', verbose_name='École')),
            ],
            options={
                'verbose_name': 'Inscription du parent',
                'verbose_name_plural': 'Inscriptions des parents',
            },
        ),
        migrations.CreateModel(
            name='Ebook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('author', models.CharField(max_length=100)),
                ('publication_date', models.DateField()),
                ('cover_image', models.ImageField(upload_to='cover_images')),
                ('pdf_file', models.FileField(upload_to='pdf_files')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.school')),
            ],
            options={
                'verbose_name': 'Ebook',
                'verbose_name_plural': 'Ebooks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nom de la salle')),
                ('frequency_of_attendance', models.CharField(max_length=100, null=True, verbose_name='Frequence de frequentation')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.school', verbose_name='École')),
            ],
            options={
                'verbose_name': 'Salle de classe',
                'verbose_name_plural': 'Salles de classes',
            },
        ),
        migrations.AddField(
            model_name='school',
            name='school_cycle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.schoolcycle', verbose_name='Cycle scolaire'),
        ),
        migrations.CreateModel(
            name='SchoolExpense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Montant')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('date', models.DateField(verbose_name='Date de dépense')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.expensecategory', verbose_name='Catégorie de dépense')),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='backend.school')),
            ],
            options={
                'verbose_name': 'Dépense',
                'verbose_name_plural': 'Dépenses',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='SchoolInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('date', models.DateField(verbose_name='Date de facturation')),
                ('due_date', models.DateField(verbose_name="Date d'échéance")),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Montant')),
                ('schooling_of', models.CharField(choices=[('Janvier', 'Janvier'), ('Février', 'Février'), ('Mars', 'Mars'), ('Avril', 'Avril'), ('Mai', 'Mai'), ('Juin', 'Juin'), ('Juillet', 'Juillet'), ('Août', 'Août'), ('Septembre', 'Septembre'), ('Octobre', 'Octobre'), ('Novembre', 'Novembre'), ('Décembre', 'Décembre')], max_length=10)),
                ('invoice_status', models.CharField(choices=[('Entièrement payé', 'Entièrement payé'), ('Non payé', 'Non payé'), ('Avance', 'Avance')], max_length=20, verbose_name='Statut')),
                ('payment_method', models.CharField(blank=True, max_length=50, verbose_name='Mode de paiement')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Payé')),
                ('is_recurring', models.BooleanField(default=False, verbose_name='Facture récurrente')),
                ('recurrence_period', models.CharField(blank=True, choices=[('Mensuel', 'Mensuel'), ('Trimestriel', 'Trimestriel'), ('Annuel', 'Annuel')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('late_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Frais de retard')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.classroom', verbose_name='Salle de classe')),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='École', to='backend.school')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Élève', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Facture',
                'verbose_name_plural': 'Factures',
                'ordering': ['-date'],
            },
        ),
        migrations.AddField(
            model_name='payment',
            name='invoice',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='backend.schoolinvoice'),
        ),
        migrations.CreateModel(
            name='SchoolLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='Nom du niveau')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.schoolcycle', verbose_name='Cycle scolaire')),
                ('series', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.schoolseries', verbose_name='Série')),
            ],
            options={
                'verbose_name': 'Niveau scolaire',
                'verbose_name_plural': 'Niveaux scolaires',
            },
        ),
        migrations.AddField(
            model_name='classroom',
            name='school_level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.schoollevel', verbose_name='Niveau scolaire'),
        ),
        migrations.CreateModel(
            name='SchoolMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du matériel')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('material_type', models.CharField(choices=[('livre', 'Livre'), ('ordinateur', 'Ordinateur'), ('fourniture', 'Fourniture scolaire'), ('autre', 'Autre')], max_length=50, verbose_name='Type de matériel')),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantité')),
                ('available_quantity', models.PositiveIntegerField(verbose_name='Quantité disponible')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.school')),
            ],
        ),
        migrations.CreateModel(
            name='MaterialRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_date', models.DateField(auto_now_add=True, verbose_name='Date de demande')),
                ('quantity_requested', models.PositiveIntegerField(verbose_name='Quantité demandée')),
                ('status', models.CharField(choices=[('approuvé', 'Approuvé'), ('rejeté', 'Rejeté'), ('en attente', 'En attente')], default='en attente', max_length=20, verbose_name='Statut')),
                ('approved_date', models.DateField(blank=True, null=True, verbose_name="Date d'approbation")),
                ('rejected_reason', models.TextField(blank=True, null=True, verbose_name='Raison du rejet')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Demandeur')),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='backend.schoolmaterial')),
            ],
            options={
                'verbose_name': 'Demande de matériel',
                'verbose_name_plural': 'Demandes de matériel',
            },
        ),
        migrations.CreateModel(
            name='SchoolYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('year', models.CharField(max_length=20, verbose_name='Année scolaire')),
                ('is_current_year', models.BooleanField(default=False, verbose_name='Année en cours')),
                ('start_date', models.DateField(verbose_name='Date de début')),
                ('end_date', models.DateField(verbose_name='Date de fin')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.school', verbose_name='École')),
            ],
            options={
                'verbose_name': 'Année scolaire',
                'verbose_name_plural': 'Années scolaires',
            },
        ),
        migrations.CreateModel(
            name='SchoolAbsence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('justified', models.BooleanField(default=False)),
                ('absence_date', models.DateField(verbose_name="Date de l'absence")),
                ('absence_type', models.CharField(max_length=100, verbose_name="Type d'absence")),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='Remarques')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('classroom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.classroom', verbose_name='Salle de classe')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Élève')),
                ('school_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.schoolyear', verbose_name='Année scolaire')),
            ],
            options={
                'verbose_name': "Absence d'élève",
                'verbose_name_plural': "Absences d'élèves",
            },
        ),
        migrations.CreateModel(
            name='StudentRegistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('is_paid', models.BooleanField(default=False, verbose_name='Payé')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('is_graduated', models.BooleanField(default=False, verbose_name='Élève admis(e)')),
                ('is_transferred', models.BooleanField(default=False, verbose_name='Élève transféré(e)')),
                ('is_suspended', models.BooleanField(default=False, verbose_name='Élève suspendu(e)')),
                ('is_withdrawn', models.BooleanField(default=False, verbose_name='Élève retiré(e)')),
                ('is_reinscribed', models.BooleanField(default=False, verbose_name='Élève réinscrit(e)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.classroom', verbose_name='Salle de classe')),
                ('school_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.schoolyear', verbose_name='Année scolaire')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Élève')),
            ],
            options={
                'verbose_name': 'Inscription',
                'verbose_name_plural': 'Inscriptions',
                'unique_together': {('student', 'classroom', 'school_year')},
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Nom de la matière')),
                ('coefficient', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.school', verbose_name='École')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.subjectgroup', verbose_name='Groupe de matière')),
            ],
            options={
                'verbose_name': 'Matière',
                'verbose_name_plural': 'Matières',
                'ordering': ['name'],
                'unique_together': {('name', 'group')},
            },
        ),
        migrations.CreateModel(
            name='SchoolReportCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('grade', models.CharField(max_length=5, verbose_name='Grade')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.school', verbose_name='École')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Élève')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.subject', verbose_name='Matière')),
            ],
            options={
                'verbose_name': 'Bulletin de notes',
                'verbose_name_plural': 'Bulletins de notes',
            },
        ),
        migrations.CreateModel(
            name='Information',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('image', models.ImageField(blank=True, upload_to='information_images')),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('published', models.BooleanField(default=True)),
                ('views', models.PositiveIntegerField(default=0)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.school')),
                ('tags', models.ManyToManyField(blank=True, related_name='informations', to='backend.tag')),
            ],
            options={
                'verbose_name': 'Information',
                'verbose_name_plural': 'Informations',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('image', models.ImageField(blank=True, upload_to='event_images')),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('published', models.BooleanField(default=True)),
                ('views', models.PositiveIntegerField(default=0)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.school')),
                ('tags', models.ManyToManyField(blank=True, related_name='events', to='backend.tag')),
            ],
            options={
                'verbose_name': 'Événement',
                'verbose_name_plural': 'Événements',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('image', models.ImageField(blank=True, upload_to='announcement_images')),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('published', models.BooleanField(default=True)),
                ('views', models.PositiveIntegerField(default=0)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.school')),
                ('tags', models.ManyToManyField(blank=True, related_name='announcements', to='backend.tag')),
            ],
            options={
                'verbose_name': 'Annonce',
                'verbose_name_plural': 'Annonces',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='TeacherRegistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.school', verbose_name='École')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Enseignant')),
            ],
            options={
                'verbose_name': "Inscription d'enseignant",
                'verbose_name_plural': "Inscriptions d'enseignants",
            },
        ),
        migrations.CreateModel(
            name='SchoolCalendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('date', models.DateField(verbose_name='Date')),
                ('events', models.TextField(verbose_name='Événements')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.school', verbose_name='École')),
            ],
            options={
                'verbose_name': 'Calendrier scolaire',
                'verbose_name_plural': 'Calendriers scolaires',
                'ordering': ['-date'],
                'unique_together': {('date', 'school')},
            },
        ),
        migrations.CreateModel(
            name='SchoolHoliday',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('date', models.DateField(verbose_name='Date')),
                ('description', models.TextField(verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.school', verbose_name='École')),
            ],
            options={
                'verbose_name': 'Congé scolaire',
                'verbose_name_plural': 'Congés scolaires',
                'ordering': ['-date'],
                'unique_together': {('date', 'school')},
            },
        ),
        migrations.CreateModel(
            name='StudentEvaluation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('evaluation_date', models.DateField(verbose_name="Date de l'évaluation")),
                ('score', models.FloatField(blank=True, null=True, verbose_name='Score')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='Remarques')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('school_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.schoolyear', verbose_name='Année scolaire')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Élève')),
                ('inscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.studentregistration', verbose_name='Inscription')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.subject', verbose_name='Matière')),
            ],
            options={
                'verbose_name': "Évaluation d'élève",
                'verbose_name_plural': "Évaluations d'élèves",
                'unique_together': {('student', 'subject', 'evaluation_date')},
            },
        ),
        migrations.CreateModel(
            name='SchoolSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('day', models.CharField(max_length=10, verbose_name='Jour')),
                ('start_time', models.TimeField(verbose_name='Heure de début')),
                ('end_time', models.TimeField(verbose_name='Heure de fin')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.classroom', verbose_name='Salle de classe')),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.school', verbose_name='École')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Professeur')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.subject', verbose_name='Matière')),
            ],
            options={
                'verbose_name': 'Emplois du temps scolaire',
                'verbose_name_plural': 'Emplois du temps scolaires',
                'ordering': ['subject', 'day', 'start_time'],
                'unique_together': {('subject', 'day', 'start_time', 'classroom')},
            },
        ),
        migrations.CreateModel(
            name='SchoolProgram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('description', models.TextField(verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.school', verbose_name='École')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.subject', verbose_name='Matière')),
            ],
            options={
                'verbose_name': 'Programme scolaire',
                'verbose_name_plural': 'Programmes scolaires',
                'ordering': ['subject'],
                'unique_together': {('subject', 'school')},
            },
        ),
        migrations.CreateModel(
            name='SubjectAttribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.classroom', verbose_name='Salle de classe')),
                ('school_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.schoolyear', verbose_name='Année scolaire')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.subject', verbose_name='Matière')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Professeur')),
            ],
            options={
                'verbose_name': 'Attribution de matière',
                'verbose_name_plural': 'Attributions de matières',
                'ordering': ['subject'],
                'unique_together': {('subject', 'classroom')},
            },
        ),
    ]
